{"version":3,"sources":["components/Header/Header.js","components/LocationInput/LocationInput.js","components/RestaurantCard/RestaurantCard.js","components/Footer/Footer.js","utils/theme.js","App.js","reportWebVitals.js","index.js"],"names":["Header","id","Heading","size","LocationInput","setRestaurantName","setRestaurantImage","setRestaurantCategories","setRestaurantYelp","setShowRestaurantCard","useState","location","setLocation","SearchInput","placeholder","onChange","e","target","value","Button","marginLeft","onClick","API_URL","console","log","fetch","then","response","json","restaurant","name","image_url","categories","map","category","title","rating","url","RestaurantCard","restaurantName","restaurantImage","restaurantCategories","restaurantYelp","showRestaurantCard","Dialog","topOffset","isShown","onCloseComplete","hasClose","onConfirm","close","newWindow","window","open","opener","confirmLabel","src","alt","Badge","color","marginTop","marginRight","Footer","Text","Link","href","theme","defaultTheme","components","baseStyle","paddingX","paddingY","borderRadius","backgroundColor","opacity","transition","_hover","_active","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e3f86543.chunk.js","sourcesContent":["import React from 'react';\nimport { Heading } from 'evergreen-ui';\nimport './Header.css';\n\nfunction Header() {\n  return (\n    <div id=\"header\">\n      <Heading size={900}>indecisive diners üçî üåÆ üç±</Heading>\n    </div>\n  );\n}\n\nexport default Header;\n","import React, { useState } from 'react';\nimport { Button, SearchInput } from 'evergreen-ui';\nimport './LocationInput.css';\n\nfunction LocationInput({\n  setRestaurantName,\n  setRestaurantImage,\n  setRestaurantCategories,\n  setRestaurantYelp,\n  setShowRestaurantCard\n}) {\n  const [ location, setLocation ] = useState(\"\");\n\n  const onSearchClick = () => {\n    if (location) {\n      const API_URL = `https://indecisive-diners-server.herokuapp.com/${location}`\n      console.log(API_URL);\n      fetch(API_URL)\n        .then(response => response.json())\n        .then(restaurant => {\n          console.log(restaurant);\n          setRestaurantName(restaurant.name);\n          setRestaurantImage(restaurant.image_url);\n          setRestaurantCategories([\n            ...restaurant.categories.map(category => category.title),\n            `${restaurant.rating} stars on yelp`\n          ]);\n          setRestaurantYelp(restaurant.url);\n          console.log(restaurant.url)\n          setShowRestaurantCard(true);\n        });\n    }\n  };\n\n  return (\n    <div id=\"location-input\">\n      <SearchInput\n        placeholder=\"First, what's your location?\" \n        onChange={(e) => setLocation(e.target.value)} \n      />\n      <Button\n        marginLeft={12}\n        onClick={onSearchClick}>\n          Decide, please!\n      </Button>\n    </div>\n  );\n}\n\nexport default LocationInput;\n","import React from 'react';\nimport { Badge, Dialog } from \"evergreen-ui\";\nimport './RestaurantCard.css';\n\nfunction RestaurantCard({\n  restaurantName,\n  restaurantImage,\n  restaurantCategories,\n  restaurantYelp,\n  showRestaurantCard,\n  setShowRestaurantCard\n}) {\n  const openYelp = (close) => {\n    console.log(restaurantYelp)\n    const newWindow = window.open(restaurantYelp, '_blank', 'noopener,noreferrer')\n    if (newWindow) {\n      newWindow.opener = null;\n    }\n  }\n\n  return (\n    <Dialog\n        topOffset={\"5vh\"}\n        isShown={showRestaurantCard}\n        title={`What about ${restaurantName}?`}\n        onCloseComplete={() => setShowRestaurantCard(false)}\n        hasClose={false}\n        onConfirm={openYelp}\n        confirmLabel=\"View on Yelp\"\n      >\n        <div id=\"restaurant-card\">\n          <div id=\"restaurant-img-wrapper\">\n            <img id=\"restaurant-img\" src={restaurantImage} alt={restaurantName} />\n          </div>\n          <div id=\"restaurant-categories-wrapper\">\n            {restaurantCategories.map(category => {\n              return (\n                <Badge color=\"neutral\" key={category} marginTop={8} marginRight={8}>\n                  # {category}\n                </Badge>\n              );\n            })}\n          </div>\n        </div>\n    </Dialog>\n  );\n}\n\nexport default RestaurantCard;\n","import React from 'react';\nimport { Link, Text } from 'evergreen-ui';\nimport './Footer.css';\n\nfunction Footer() {\n  return (\n    <div id=\"footer\">\n      <Text>made with ‚ô• by <Link href=\"https://eliselee.dev\"> elise</Link>\n      </Text>\n    </div>\n  );\n}\n\nexport default Footer;\n","import { defaultTheme } from \"evergreen-ui\";\n\nconst primary = '#f26346';\n\nconst theme = {\n    ...defaultTheme,\n    components: {\n      ...defaultTheme.components,\n      Button: {\n        baseStyle: {\n          color: 'white',\n          paddingX: 12,\n          paddingY: 8,\n          borderRadius: 5,\n          backgroundColor: primary,\n          opacity: '0.8',\n          transition: '0.5s',\n          _hover: {\n            opacity: '0.9',\n          },\n          _active: {\n            opacity: '1',\n          },\n        },\n      },\n    }\n  };\n\n  export default theme;","import React, { useState } from 'react';\n\n// Components\nimport Header from './components/Header/Header';\nimport LocationInput from './components/LocationInput/LocationInput';\nimport RestaurantCard from './components/RestaurantCard/RestaurantCard';\nimport Footer from './components/Footer/Footer';\n\n// Styling\nimport theme from \"./utils/theme\";\nimport { ThemeProvider } from 'evergreen-ui';\nimport './App.css';\n\nfunction App() {\n  const [ restaurantName, setRestaurantName ] = useState(\"\");\n  const [ restaurantImage, setRestaurantImage ] = useState(\"\");\n  const [ restaurantCategories, setRestaurantCategories ] = useState([]);\n  const [ restaurantYelp, setRestaurantYelp ] = useState(\"https://yelp.com\");\n\n  const [ showRestaurantCard, setShowRestaurantCard ] = useState(false)\n\n  return (\n    <ThemeProvider value={theme}>\n      <div id=\"page\">\n        <Header />\n        <LocationInput \n          setRestaurantName={setRestaurantName}\n          setRestaurantImage={setRestaurantImage}\n          setRestaurantCategories={setRestaurantCategories}\n          setRestaurantYelp={setRestaurantYelp}\n          setShowRestaurantCard={setShowRestaurantCard}\n        />\n        <RestaurantCard\n          restaurantName={restaurantName}\n          restaurantImage={restaurantImage}\n          restaurantCategories={restaurantCategories}\n          restaurantYelp={restaurantYelp}\n          showRestaurantCard={showRestaurantCard}\n          setShowRestaurantCard={setShowRestaurantCard}\n        />\n        <Footer />\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}